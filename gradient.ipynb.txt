import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.preprocessing import PolynomialFeatures
from sklearn.pipeline import make_pipeline

# Generate synthetic data
np.random.seed(42)
X = np.linspace(-3, 3, 100).reshape(-1, 1)
y_true = 0.5 * X**3 - X**2 + X
y = y_true + np.random.randn(*X.shape) * 0.8  # noisy target

# Fit a polynomial regression model (degree 3)
model = make_pipeline(PolynomialFeatures(degree=3), LinearRegression())
model.fit(X, y)

# Predict with the model
y_pred = model.predict(X)

# Plot everything
plt.figure(figsize=(10, 5))
plt.scatter(X, y, color='orange', label='True Data (with noise)', alpha=0.7)
plt.plot(X, y_true, 'g--', label='True Function', linewidth=2)
plt.plot(X, y_pred, 'b-', label='Learned Function (Model Prediction)', linewidth=2)
plt.title("Model Performance: Fitting a Cubic Function")
plt.xlabel("X Value")
plt.ylabel("Y Value")
plt.legend()
plt.grid(True)
plt.show()

